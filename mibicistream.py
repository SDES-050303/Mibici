import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from geopy.distance import geodesic
import zipfile
from io import BytesIO

# -----------------------------------------
# üîπ Configuraci√≥n Inicial de Streamlit
# -----------------------------------------
st.set_page_config(page_title="An√°lisis Mibici", layout="wide")
st.image("./IMG/Foto de estacion mibici.jpg", use_container_width=True)

st.title("üö¥‚Äç‚ôÇÔ∏è An√°lisis de Datos Mibici")
st.markdown("""
Este dashboard analiza **Mibici** a lo largo de 10 a√±os con gr√°ficos interactivos y estad√≠sticas.  
Los datos provienen de [Mibici - Datos Abiertos](https://www.mibici.net/es/datos-abiertos/).  
üí° **Sube un archivo ZIP con los datos** para comenzar el an√°lisis.
""")

# -----------------------------------------
# üîπ Sidebar: Configuraci√≥n y Carga de Datos
# -----------------------------------------
st.sidebar.title("‚öôÔ∏è Configuraci√≥n")
uploaded_file = st.sidebar.file_uploader("üìÅ Sube el ZIP con los datos", type="zip")

# -----------------------------------------
# üîπ Cargar nomenclatura de estaciones
# -----------------------------------------
@st.cache_data
def cargar_nomenclatura():
    try:
        return pd.read_csv("./datos/Nomenclatura_de_estaciones/nomenclatura_2025_01.csv", encoding='latin-1')
    except Exception as e:
        st.sidebar.error(f"‚ö†Ô∏è Error al cargar la nomenclatura: {e}")
        return None

nomenclatura = cargar_nomenclatura()

# -----------------------------------------
# üîπ Funci√≥n para Cargar y Procesar Datos ZIP
# -----------------------------------------
@st.cache_data
def cargar_datos_zip(zip_file):
    """Carga y procesa los archivos CSV dentro del ZIP."""
    dfs_por_a√±o = {}
    
    try:
        with zipfile.ZipFile(zip_file, "r") as z:
            archivos_csv = [f for f in z.namelist() if f.endswith(".csv")]

            for archivo in archivos_csv:
                with z.open(archivo) as f:
                    df = pd.read_csv(f, encoding='latin-1')

                    # Renombrar columnas
                    df.rename(columns={
                        'Usuario_Id': 'Usuario Id',
                        'A√±o_de_nacimiento': 'A√±o de nacimiento',
                        'Inicio_del_viaje': 'Inicio del viaje',
                        'Fin_del_viaje': 'Fin del viaje',
                        'Origen_Id': 'Origen Id',
                        'Destino_Id': 'Destino Id',
                        'Viaje_Id': 'Viaje Id'
                    }, inplace=True)

                    # Convertir fechas y extraer A√±o y Mes
                    df["Inicio del viaje"] = pd.to_datetime(df["Inicio del viaje"], errors="coerce")
                    df["Fin del viaje"] = pd.to_datetime(df["Fin del viaje"], errors="coerce")
                    df["A√±o"] = df["Inicio del viaje"].dt.year
                    df["Mes"] = df["Inicio del viaje"].dt.month

                    # Extraer el a√±o desde el nombre del archivo
                    a√±o = archivo.split("_")[1][:4]
                    dfs_por_a√±o[a√±o] = df

        global_df = pd.concat(dfs_por_a√±o.values(), ignore_index=True)
        return dfs_por_a√±o, global_df

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error al procesar el archivo ZIP: {e}")
        return None, None

# -----------------------------------------
# üîπ Cargar Datos desde ZIP
# -----------------------------------------
if uploaded_file:
    dfs_por_a√±o, global_df = cargar_datos_zip(uploaded_file)
    if global_df is not None:
        st.sidebar.success("‚úÖ Datos cargados correctamente.")
    else:
        st.sidebar.error("‚ö†Ô∏è No se pudieron cargar los datos.")
        st.stop()
else:
    st.sidebar.warning("‚ö†Ô∏è Carga un archivo ZIP para continuar.")
    st.stop()

# -----------------------------------------
# üîπ Sidebar: Selecci√≥n de A√±o
# -----------------------------------------
opciones_a√±o = ["Global"] + sorted(dfs_por_a√±o.keys())
seleccion_a√±o = st.sidebar.selectbox("üìÜ Selecciona un A√±o", opciones_a√±o)

df_seleccionado = global_df if seleccion_a√±o == "Global" else dfs_por_a√±o[seleccion_a√±o]

# -----------------------------------------
# üìä N√∫mero de Viajes por Mes y A√±o
# -----------------------------------------
st.subheader("üìä N√∫mero de Viajes por Mes y A√±o")

viajes_mensuales = df_seleccionado.groupby(["A√±o", "Mes"]).size().reset_index(name="Total de Viajes")

fig, ax = plt.subplots(figsize=(14, 6))
sns.lineplot(data=viajes_mensuales, x="Mes", y="Total de Viajes", hue="A√±o", palette="tab10", marker="o", ax=ax)
ax.set_xlabel("Mes")
ax.set_ylabel("Total de Viajes")
ax.set_xticks(range(1, 13))
ax.set_xticklabels(["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"])
st.pyplot(fig)

# -----------------------------------------
# üìä Uso de Estaciones (Top 10)
# -----------------------------------------
st.subheader("üö¥‚Äç‚ôÇÔ∏è Top 10 Estaciones con M√°s Viajes")

viajes_origen = df_seleccionado["Origen Id"].value_counts().head(10).reset_index()
viajes_origen.columns = ["Estaci√≥n", "Viajes"]

fig, ax = plt.subplots(figsize=(12, 6))
sns.barplot(data=viajes_origen, x="Estaci√≥n", y="Viajes", palette="viridis", ax=ax)
ax.set_xlabel("Estaci√≥n")
ax.set_ylabel("N√∫mero de Viajes")
ax.set_title("Top 10 Estaciones con M√°s Viajes")
st.pyplot(fig)

# -----------------------------------------
# üîπ Funci√≥n para Calcular Promedio de Viajes
# -----------------------------------------
def calcular_promedio_viajes(df, group_col, value_name="Total de Viajes"):
    """Agrupa los datos por una columna y calcula el total y promedio de viajes."""
    if group_col not in df.columns:
        st.error(f"‚ö†Ô∏è ERROR: La columna '{group_col}' no est√° en los datos.")
        return None, None
    
    # Agrupar por la columna dada y contar el n√∫mero de viajes
    viajes = df.groupby(group_col).size().reset_index(name=value_name)
    
    # Calcular el promedio
    promedio = viajes[value_name].mean()
    
    return viajes, promedio

# -----------------------------------------
# üìä Promedio de Viajes por Estaci√≥n
# -----------------------------------------
st.subheader("üìå Promedio de Viajes por Estaci√≥n")

viajes_por_estacion, promedio_viajes_estacion = calcular_promedio_viajes(global_df, "Origen Id")

if viajes_por_estacion is not None:
    st.write(f"üìä **Promedio de viajes por estaci√≥n:** {promedio_viajes_estacion:.2f} viajes")

    # üîπ Mostrar Top 10 Estaciones con m√°s viajes
    top_10_estaciones = viajes_por_estacion.sort_values(by="Total de Viajes", ascending=False).head(10)

    st.subheader("üö≤ **Top 10 Estaciones con M√°s Viajes**")
    st.dataframe(top_10_estaciones)

    # üîπ Gr√°fica de los 10 primeros promedios de viajes por estaci√≥n
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.barplot(x=top_10_estaciones['Origen Id'], y=top_10_estaciones['Total de Viajes'], palette="viridis", ax=ax)
    ax.set_xlabel('Estaci√≥n')
    ax.set_ylabel('Total de Viajes')
    ax.set_title('Top 10 Estaciones con M√°s Viajes')
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig)

# -----------------------------------------
# üìÜ Promedio de Viajes por A√±o
# -----------------------------------------
st.subheader("üìÜ Promedio de Viajes por A√±o")

viajes_por_a√±o, promedio_viajes_a√±o = calcular_promedio_viajes(global_df, "A√±o")

if viajes_por_a√±o is not None:
    st.write(f"üìä **Promedio de viajes por a√±o:** {promedio_viajes_a√±o:.2f} viajes")

    # üîπ Gr√°fica de la evoluci√≥n de viajes por a√±o
    fig, ax = plt.subplots(figsize=(12, 6))
    sns.lineplot(data=viajes_por_a√±o, x="A√±o", y="Total de Viajes", marker="o", color="b", ax=ax)
    ax.set_xlabel("A√±o")
    ax.set_ylabel("N√∫mero de Viajes")
    ax.set_title("üìà Evoluci√≥n de Viajes por A√±o")
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig)

# -----------------------------------------
# üìç Funci√≥n para Calcular Distancia Recorrida
# -----------------------------------------
def calcular_distancia(row):
    """Calcula la distancia entre estaciones o la aproxima con velocidad promedio."""
    try:
        origen = (row['lat_origin'], row['lon_origin'])
        destino = (row['lat_destination'], row['lon_destination'])

        if pd.isna(origen[0]) or pd.isna(destino[0]):
            return np.nan  # Si hay valores nulos, devuelve NaN

        if origen == destino:
            return (row['Duraci√≥n (min)'] / 60) * 15  # Aproximaci√≥n por velocidad 15 km/h
        else:
            return geodesic(origen, destino).km  # Distancia geod√©sica real
    except:
        return np.nan  # Si hay un error, devuelve NaN

# -----------------------------------------
# üö¥ C√°lculo de Distancia Recorrida
# -----------------------------------------
st.subheader("üìè **Aproximaci√≥n de Distancia Recorrida**")

df_distancia = global_df.copy()

# üîπ **Validar y Calcular Duraci√≥n si no existe**
if "Duraci√≥n (min)" not in df_distancia.columns:
    df_distancia["Inicio del viaje"] = pd.to_datetime(df_distancia["Inicio del viaje"], errors="coerce")
    df_distancia["Fin del viaje"] = pd.to_datetime(df_distancia["Fin del viaje"], errors="coerce")
    df_distancia["Duraci√≥n (min)"] = (df_distancia["Fin del viaje"] - df_distancia["Inicio del viaje"]).dt.total_seconds() / 60

# üîπ **Cargar y unir coordenadas de la nomenclatura**
nomenclatura = pd.read_csv("./datos/Nomenclatura de las estaciones/nomenclatura_2025_01.csv", encoding='latin-1')
nomenclatura = nomenclatura.rename(columns={"id": "Estaci√≥n", "latitude": "lat", "longitude": "lon"})

df_distancia = df_distancia.merge(nomenclatura[['Estaci√≥n', 'lat', 'lon']], left_on="Origen Id", right_on="Estaci√≥n", how="left")
df_distancia = df_distancia.rename(columns={"lat": "lat_origin", "lon": "lon_origin"}).drop(columns=["Estaci√≥n"])

df_distancia = df_distancia.merge(nomenclatura[['Estaci√≥n', 'lat', 'lon']], left_on="Destino Id", right_on="Estaci√≥n", how="left")
df_distancia = df_distancia.rename(columns={"lat": "lat_destination", "lon": "lon_destination"}).drop(columns=["Estaci√≥n"])

# üîπ **Aplicar funci√≥n de c√°lculo de distancia**
df_distancia["Distancia (km)"] = df_distancia.apply(calcular_distancia, axis=1)

# üîπ **Mostrar datos de ejemplo**
st.write("üìå **Ejemplo de Distancias Calculadas (Primeros 10 registros)**")
st.dataframe(df_distancia[["Origen Id", "Destino Id", "Duraci√≥n (min)", "Distancia (km)"]].head(10))

# üîπ **Gr√°fico de Distribuci√≥n de Distancias**
fig, ax = plt.subplots(figsize=(12, 6))
sns.histplot(df_distancia["Distancia (km)"], bins=30, kde=True, color="blue", ax=ax)
ax.set_xlabel("Distancia Recorrida (km)")
ax.set_ylabel("Frecuencia")
ax.set_title("Distribuci√≥n de Distancias Recorridas")
st.pyplot(fig)

# -----------------------------------------
# üî• Comparaci√≥n de Tiempo de Viaje por Ruta y G√©nero
# -----------------------------------------
st.subheader("‚è≥ **Comparaci√≥n de Tiempo de Viaje por Ruta y G√©nero**")

# üîπ **Filtrar datos y generar rutas**
df_genero_ruta = df_distancia[["Origen Id", "Destino Id", "Duraci√≥n (min)", "Genero"]].dropna()
df_genero_ruta["Ruta"] = df_genero_ruta["Origen Id"].astype(str) + " ‚Üí " + df_genero_ruta["Destino Id"].astype(str)

# üîπ **Gr√°fico de Distribuci√≥n de Tiempo de Viaje por G√©nero**
fig1, ax1 = plt.subplots(figsize=(12, 6))
sns.boxplot(data=df_genero_ruta, x="Genero", y="Duraci√≥n (min)", palette="pastel", ax=ax1)
ax1.set_xlabel("G√©nero")
ax1.set_ylabel("Duraci√≥n del Viaje (min)")
ax1.set_title("Distribuci√≥n del Tiempo de Viaje por G√©nero")
st.pyplot(fig1)

# üîπ **Calcular Promedio de Duraci√≥n por Ruta y G√©nero**
promedio_por_ruta = df_genero_ruta.groupby(["Ruta", "Genero"])["Duraci√≥n (min)"].mean().reset_index()

# üîπ **Seleccionar las 10 rutas m√°s frecuentes**
top_rutas = df_genero_ruta["Ruta"].value_counts().head(10).index
df_top_rutas = promedio_por_ruta[promedio_por_ruta["Ruta"].isin(top_rutas)]

# üîπ **Gr√°fico de Comparaci√≥n del Tiempo de Viaje por Ruta y G√©nero**
fig2, ax2 = plt.subplots(figsize=(14, 6))
sns.barplot(data=df_top_rutas, x="Ruta", y="Duraci√≥n (min)", hue="Genero", palette="muted", ax=ax2)
ax2.set_xlabel("Ruta")
ax2.set_ylabel("Duraci√≥n Promedio (min)")
ax2.set_title("Comparaci√≥n del Tiempo de Viaje por Ruta y G√©nero")
ax2.tick_params(axis='x', rotation=45)
st.pyplot(fig2)

# -----------------------------------------
# üìä Funci√≥n para calcular los viajes por d√≠a de la semana
# -----------------------------------------
def calcular_viajes_por_dia(df):
    """Convierte fechas, obtiene d√≠as de la semana y cuenta viajes."""
    df["Inicio del viaje"] = pd.to_datetime(df["Inicio del viaje"], errors="coerce")
    df["D√≠a de la Semana"] = df["Inicio del viaje"].dt.dayofweek
    dias_semana = {0: "Lunes", 1: "Martes", 2: "Mi√©rcoles", 3: "Jueves", 
                   4: "Viernes", 5: "S√°bado", 6: "Domingo"}
    df["D√≠a de la Semana"] = df["D√≠a de la Semana"].map(dias_semana)
    
    # Contar viajes por d√≠a de la semana
    viajes_por_dia = df["D√≠a de la Semana"].value_counts().reindex(dias_semana.values()).reset_index()
    viajes_por_dia.columns = ["D√≠a de la Semana", "N√∫mero de Viajes"]
    
    return viajes_por_dia

# -----------------------------------------
# üìä An√°lisis de Uso por D√≠a de la Semana
# -----------------------------------------
st.subheader("üìÖ **Uso de Mibici por D√≠a de la Semana**")

viajes_por_dia = calcular_viajes_por_dia(global_df)

# üîπ **Gr√°fico de Barras: N√∫mero de Viajes por D√≠a**
fig1, ax1 = plt.subplots(figsize=(10, 5))
sns.barplot(data=viajes_por_dia, x="D√≠a de la Semana", y="N√∫mero de Viajes", palette="pastel", ax=ax1)
ax1.set_xlabel("D√≠a de la Semana", fontsize=12)
ax1.set_ylabel("N√∫mero de Viajes", fontsize=12)
ax1.set_title("N√∫mero Total de Viajes por D√≠a de la Semana", fontsize=14)
plt.xticks(rotation=45)
plt.tight_layout()
st.pyplot(fig1)

# üîπ **Gr√°fico de L√≠nea: Tendencia de Uso por D√≠a**
fig2, ax2 = plt.subplots(figsize=(10, 5))
sns.lineplot(data=viajes_por_dia, x="D√≠a de la Semana", y="N√∫mero de Viajes", marker="o", color="b", ax=ax2)
ax2.set_xlabel("D√≠a de la Semana", fontsize=12)
ax2.set_ylabel("N√∫mero de Viajes", fontsize=12)
ax2.set_title("Tendencia de Uso por D√≠a de la Semana", fontsize=14)
plt.xticks(rotation=45)
plt.tight_layout()
st.pyplot(fig2)

# -----------------------------------------
# üí∞ Funci√≥n para Calcular el Costo de los Viajes
# -----------------------------------------
def calcular_costo(duracion):
    """
    Calcula el costo adicional del viaje seg√∫n su duraci√≥n en minutos.
    - 0 a 30 min: incluido (0 MXN)
    - 30:01 a 60 min: 29.00 MXN
    - >60 min: 29.00 MXN + 40.00 MXN por cada media hora adicional (o fracci√≥n)
    """
    if duracion <= 30:
        return 0.0
    elif duracion <= 60:
        return 29.0
    else:
        periodos_adicionales = np.ceil((duracion - 60) / 30)  # Cada 30 min adicionales
        return 29.0 + (periodos_adicionales * 40.0)

# -----------------------------------------
# üí∞ C√°lculo del Total de Dinero Gastado
# -----------------------------------------
st.subheader("üí∞ **Total de Dinero Gastado (Aproximado)**")

# üîπ **Verificar si la columna "Duraci√≥n (min)" existe**
if "Duraci√≥n (min)" not in global_df.columns:
    st.error("‚ö†Ô∏è ERROR: La columna 'Duraci√≥n (min)' no existe. Se proceder√° a calcularla nuevamente.")
    
    # Convertir a datetime
    global_df["Inicio del viaje"] = pd.to_datetime(global_df["Inicio del viaje"], errors="coerce")
    global_df["Fin del viaje"] = pd.to_datetime(global_df["Fin del viaje"], errors="coerce")
    
    # Calcular la duraci√≥n en minutos
    global_df["Duraci√≥n (min)"] = (global_df["Fin del viaje"] - global_df["Inicio del viaje"]).dt.total_seconds() / 60
    
    # Eliminar valores negativos o nulos
    global_df = global_df[global_df["Duraci√≥n (min)"] > 0]
    st.success("‚úÖ 'Duraci√≥n (min)' calculada y corregida.")

# üîπ **Aplicar la funci√≥n de costos**
df_costos = global_df.copy()
df_costos["Costo (MXN)"] = df_costos["Duraci√≥n (min)"].apply(calcular_costo)

# üîπ **Mostrar los primeros 10 registros**
st.write("üìä **Ejemplo de costos calculados (Primeros 10 registros):**")
st.dataframe(df_costos[["Viaje Id", "Duraci√≥n (min)", "Costo (MXN)"]].head(10))

# üîπ **Calcular el gasto total**
total_gasto = df_costos["Costo (MXN)"].sum()
st.write(f"üí∞ **Gasto Total Aproximado:** ${total_gasto:,.2f} MXN")

# üîπ **Agrupar por rangos de duraci√≥n del viaje**
bins = [0, 30, 60, 90, 120, 150, 180, 210, 240, 300, np.inf]
labels = ["0-30 min", "31-60 min", "61-90 min", "91-120 min", "121-150 min",
          "151-180 min", "181-210 min", "211-240 min", "241-300 min", "300+ min"]
df_costos["Rango de Tiempo"] = pd.cut(df_costos["Duraci√≥n (min)"], bins=bins, labels=labels, right=False)

# üîπ **Gr√°fico de Gasto Total por Duraci√≥n del Viaje**
costos_por_rango = df_costos.groupby("Rango de Tiempo")["Costo (MXN)"].sum().reset_index()

fig3, ax3 = plt.subplots(figsize=(12, 6))
sns.barplot(data=costos_por_rango, x="Rango de Tiempo", y="Costo (MXN)", palette="coolwarm", ax=ax3)
ax3.set_xlabel("Duraci√≥n del Viaje", fontsize=12)
ax3.set_ylabel("Costo Total (MXN)", fontsize=12)
ax3.set_title("üí∏ Gasto Total por Duraci√≥n del Viaje", fontsize=14)
plt.xticks(rotation=45)
plt.tight_layout()
st.pyplot(fig3)

# -------------------------------------
# üìä **An√°lisis de Uso de Estaciones**
# -------------------------------------

st.subheader("üìä Uso de Estaciones (D√≠a - Mes - A√±o - Inicio - Fin)")

# üîπ **Verificar si la columna 'Inicio del viaje' existe y convertirla a datetime si es necesario**
if "Inicio del viaje" not in global_df.columns:
    st.error("‚ö†Ô∏è ERROR: La columna 'Inicio del viaje' no existe. Se proceder√° a calcularla nuevamente.")
    global_df["Inicio del viaje"] = pd.to_datetime(global_df["Inicio del viaje"], errors="coerce")

# üîπ **Crear columnas adicionales para an√°lisis**
global_df["D√≠a de la Semana"] = global_df["Inicio del viaje"].dt.day_name()
global_df["Mes"] = global_df["Inicio del viaje"].dt.month
global_df["A√±o"] = global_df["Inicio del viaje"].dt.year
global_df["Hora"] = global_df["Inicio del viaje"].dt.hour

# üîπ **Definir opciones de an√°lisis en el Sidebar**
st.sidebar.markdown("---")
tipo_grafico = st.sidebar.selectbox(
    "üìä Selecciona el Tipo de An√°lisis:", 
    ["Uso por D√≠a de la Semana", "Uso por Mes", "Uso por A√±o", "Uso por Hora", "Comparaci√≥n Inicio vs Fin"]
)

# üîπ **Diccionario de opciones para gr√°ficos**
graficos = {
    "Uso por D√≠a de la Semana": {
        "col": "D√≠a de la Semana",
        "titulo": "Uso de Mibici por D√≠a de la Semana",
        "xlabel": "D√≠a de la Semana",
        "xticks": ["Lunes", "Martes", "Mi√©rcoles", "Jueves", "Viernes", "S√°bado", "Domingo"],
        "paleta": "pastel",
        "tipo": "bar"
    },
    "Uso por Mes": {
        "col": "Mes",
        "titulo": "Uso de Mibici por Mes",
        "xlabel": "Mes",
        "xticks": ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
        "paleta": "coolwarm",
        "tipo": "bar"
    },
    "Uso por A√±o": {
        "col": "A√±o",
        "titulo": "Evoluci√≥n del Uso de Mibici por A√±o",
        "xlabel": "A√±o",
        "xticks": None,
        "paleta": "Blues",
        "tipo": "line"
    },
    "Uso por Hora": {
        "col": "Hora",
        "titulo": "Uso de Mibici por Hora del D√≠a",
        "xlabel": "Hora del D√≠a",
        "xticks": list(range(0, 24)),
        "paleta": "Greens",
        "tipo": "line"
    }
}

# üîπ **Si el usuario selecciona una de las opciones del diccionario**
if tipo_grafico in graficos:
    config = graficos[tipo_grafico]

    st.subheader(f"üìÖ {config['titulo']}")

    # üîπ **Conteo de viajes por la columna seleccionada**
    df_agrupado = global_df[config["col"]].value_counts().sort_index().reset_index()
    df_agrupado.columns = [config["col"], "Total de Viajes"]

    # üîπ **Generar el gr√°fico seg√∫n el tipo**
    fig, ax = plt.subplots(figsize=(10, 5))
    
    if config["tipo"] == "bar":
        sns.barplot(x=config["col"], y="Total de Viajes", data=df_agrupado, palette=config["paleta"], ax=ax)
    elif config["tipo"] == "line":
        sns.lineplot(x=config["col"], y="Total de Viajes", data=df_agrupado, marker="o", color="b", ax=ax)

    ax.set_xlabel(config["xlabel"], fontsize=12)
    ax.set_ylabel("N√∫mero de Viajes", fontsize=12)
    ax.set_title(config["titulo"], fontsize=14)
    
    if config["xticks"]:
        plt.xticks(range(len(config["xticks"])), config["xticks"], rotation=45)
    
    plt.tight_layout()
    st.pyplot(fig)

# üîπ **Comparaci√≥n de Estaciones de Inicio vs Fin**
elif tipo_grafico == "Comparaci√≥n Inicio vs Fin":
    st.subheader("üö¥ Comparaci√≥n de Uso: Estaciones de Inicio vs Fin")

    # üîπ **Obtener conteos de viajes desde y hacia estaciones**
    viajes_inicio = global_df["Origen Id"].value_counts().reset_index()
    viajes_inicio.columns = ["Estaci√≥n", "Viajes Inicio"]

    viajes_fin = global_df["Destino Id"].value_counts().reset_index()
    viajes_fin.columns = ["Estaci√≥n", "Viajes Fin"]

    # üîπ **Unir ambos DataFrames**
    uso_estaciones = viajes_inicio.merge(viajes_fin, on="Estaci√≥n", how="outer").fillna(0)

    # üîπ **Seleccionar las 10 estaciones m√°s utilizadas**
    top_estaciones = uso_estaciones.sort_values(by=["Viajes Inicio", "Viajes Fin"], ascending=False).head(10)

    # üîπ **Gr√°fico de comparaci√≥n de viajes de inicio vs fin**
    fig, ax = plt.subplots(figsize=(12, 6))
    
    sns.barplot(x="Estaci√≥n", y="Viajes Inicio", data=top_estaciones, color="blue", label="Inicio", ax=ax)
    sns.barplot(x="Estaci√≥n", y="Viajes Fin", data=top_estaciones, color="red", alpha=0.6, label="Fin", ax=ax)

    ax.set_xlabel("Estaci√≥n", fontsize=12)
    ax.set_ylabel("N√∫mero de Viajes", fontsize=12)
    ax.set_title("Comparaci√≥n de Uso: Inicio vs Fin de Viajes", fontsize=14)
    ax.legend()
    
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig)

# -----------------------------------------
# üîπ An√°lisis de Correlaci√≥n Edad - Tiempo de Viaje
# -----------------------------------------
st.subheader("üìä **Correlaci√≥n entre Edad y Tiempo de Viaje**")

# üîπ **Verificar si las columnas necesarias existen**
if "A√±o de nacimiento" in global_df.columns and "Duraci√≥n (min)" in global_df.columns:
    
    # üîπ **Eliminar valores nulos y calcular la edad**
    df_edad_tiempo = global_df[["A√±o de nacimiento", "Duraci√≥n (min)"]].dropna().copy()
    df_edad_tiempo["Edad"] = pd.to_datetime("today").year - df_edad_tiempo["A√±o de nacimiento"]

    # üîπ **Eliminar edades fuera de un rango razonable (10 a 100 a√±os)**
    df_edad_tiempo = df_edad_tiempo[(df_edad_tiempo["Edad"] >= 10) & (df_edad_tiempo["Edad"] <= 100)]
    
    # üîπ **C√°lculo de la correlaci√≥n**
    correlacion = df_edad_tiempo["Edad"].corr(df_edad_tiempo["Duraci√≥n (min)"])

    st.write(f"üî¢ **Coeficiente de Correlaci√≥n Pearson:** {correlacion:.3f}")

    # üîπ **Gr√°fico de Dispersi√≥n**
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.scatterplot(data=df_edad_tiempo, x="Edad", y="Duraci√≥n (min)", alpha=0.3, color="blue", ax=ax)
    sns.regplot(data=df_edad_tiempo, x="Edad", y="Duraci√≥n (min)", scatter=False, color="red", ax=ax)
    
    ax.set_xlabel("Edad del Usuario", fontsize=12)
    ax.set_ylabel("Duraci√≥n del Viaje (min)", fontsize=12)
    ax.set_title("üìâ Relaci√≥n entre Edad y Tiempo de Viaje", fontsize=14)
    plt.tight_layout()
    st.pyplot(fig)

else:
    st.error("‚ö†Ô∏è No se encontraron las columnas necesarias ('A√±o de nacimiento' y 'Duraci√≥n (min)').")

# -----------------------------------------
# üîπ An√°lisis de Correlaci√≥n D√≠a de la Semana - Tiempo de Viaje
# -----------------------------------------
st.subheader("üìä **Correlaci√≥n entre D√≠a de la Semana y Tiempo de Viaje**")

# üîπ **Verificar si las columnas necesarias existen**
if "Inicio del viaje" in global_df.columns and "Duraci√≥n (min)" in global_df.columns:
    
    # üîπ **Convertir a datetime si es necesario**
    global_df["Inicio del viaje"] = pd.to_datetime(global_df["Inicio del viaje"], errors="coerce")

    # üîπ **Extraer el d√≠a de la semana (0=Lunes, 6=Domingo)**
    df_dia_tiempo = global_df[["Inicio del viaje", "Duraci√≥n (min)"]].dropna().copy()
    df_dia_tiempo["D√≠a de la Semana"] = df_dia_tiempo["Inicio del viaje"].dt.dayofweek

    # üîπ **Mapeo de n√∫meros a nombres de d√≠as**
    dias_semana = {0: "Lunes", 1: "Martes", 2: "Mi√©rcoles", 3: "Jueves", 4: "Viernes", 5: "S√°bado", 6: "Domingo"}
    df_dia_tiempo["D√≠a de la Semana Nombre"] = df_dia_tiempo["D√≠a de la Semana"].map(dias_semana)

    # üîπ **C√°lculo de la correlaci√≥n**
    correlacion = df_dia_tiempo["D√≠a de la Semana"].corr(df_dia_tiempo["Duraci√≥n (min)"])

    st.write(f"üî¢ **Coeficiente de Correlaci√≥n Pearson:** {correlacion:.3f}")

    # üîπ **Gr√°fico de Boxplot (Distribuci√≥n del tiempo de viaje por d√≠a)**
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.boxplot(data=df_dia_tiempo, x="D√≠a de la Semana Nombre", y="Duraci√≥n (min)", palette="coolwarm", ax=ax)
    
    ax.set_xlabel("D√≠a de la Semana", fontsize=12)
    ax.set_ylabel("Duraci√≥n del Viaje (min)", fontsize=12)
    ax.set_title("üìâ Relaci√≥n entre D√≠a de la Semana y Tiempo de Viaje", fontsize=14)
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig)

else:
    st.error("‚ö†Ô∏è No se encontraron las columnas necesarias ('Inicio del viaje' y 'Duraci√≥n (min)').")
